version: 2
jobs:
  build_python:
    # Use the machine executor because we have some special tests.
    # Hopefully this remains free.
    machine:
      image: ubuntu-2004:202111-02
    environment:
      DOCKER_WDB_SERVER: ghcr.io/domino14/word-db-server:latest
    steps:
      - checkout

      # Checkout the lexicon repo.
      - add_ssh_keys:
          fingerprints:
            - "bf:37:1b:e1:b2:b0:ec:20:92:43:20:86:40:7c:c4:e0"
      - run: if [ ! -n "$(grep "^github.com " ~/.ssh/known_hosts)" ]; then ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null; fi
      - run:
          name: Clone lexicon repo
          command: >
            git clone --depth 1 git@github.com:domino14/word-game-lexica ~/word-game-lexica &&
            rm -rf ~/word-game-lexica/.git
      # Generate the dbs needed for tests.
      - run: mkdir ~/word-game-lexica/db

      - restore_cache:
          keys:
            - lexicadb-v3
            - lexicagaddag-v3

      - run: >
          docker run --name dbmaker --rm -it -e WDB_DATA_PATH=/opt/data
          -v ~/word-game-lexica:/opt/data/lexica
          -v ~/word-game-lexica/letterdistributions:/opt/data/letterdistributions
          $DOCKER_WDB_SERVER /opt/dbmaker
          -outputdir /opt/data/lexica/db -dbs NWL18,NWL20,CSW19,FISE2

      - save_cache:
          key: lexicadb-v3
          paths:
            - /home/circleci/word-game-lexica/db

      - run:
          name: install dockerize
          command: >
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.0
      # Run the containers
      - run: cp .circleci/docker-compose.yml .
      - run: pwd
      - run: ls -al
      - run: docker-compose up -d
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for word-db-server
          command: dockerize -wait tcp://localhost:8180 -timeout 1m
      - run:
          name: Django tests
          command: docker-compose exec app ./manage.py test -v2

      - run:
          name: Stop cleanly
          command: docker-compose stop

  build_js:
    working_directory: /opt/webolith
    docker:
      - image: node:20-alpine
    steps:
      - checkout
      - run: npm install
      - run: npm run eslint
      - run: npm run jshint && npm run test && npm run build:wordwalls
      - run: apk add --update ca-certificates openssl && update-ca-certificates
      - run: cd frontend && npm install && npm run lint && npm run build
      - run: cd djAerolith/flashcards && npm install && npm run build
      - run: mkdir djAerolith/static/dist/wordvault && mv frontend/dist/* djAerolith/static/dist/wordvault
      - persist_to_workspace:
          root: djAerolith/static
          paths:
            - dist

  build_docker:
    working_directory: /opt/webolith
    environment:
      REPO: /opt/webolith
      SECRET_KEY: csw*nc9gznwuz)(w9&u#h_b2dp1%hzf_w#)%yrzwas%+v8ck_q
      # For collecting static files to later copy into Nginx. This
      # dir must be in the context of the build.
      STATIC_ROOT: /opt/webolith/static/webolith_static/
    docker:
      - image: python:3.12
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: djAerolith/static
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="27.2.1"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run: cd djAerolith && pip install -r prod_requirements.txt
      - run: apt-get update && apt-get install -y gettext
      - run:
          name: Collect static files
          command: cd djAerolith && ./manage.py collectstatic --noinput
      - run:
          name: Compile messages
          command: cd djAerolith && ./manage.py compilemessages
      - run:
          name: Build and push Docker images to Dockerhub
          command: |
            cd $REPO/static && \
                docker build -t domino14/webolith-nginx:$CIRCLE_SHA1 \
                -t domino14/webolith-nginx:latest \
                -f nginx-Dockerfile --build-arg static_root=./webolith_static/ .
            # Delete the static files for the webapp container. They've
            # already been copied to the docker image.
            rm -rf $STATIC_ROOT
            cd $REPO && \
              docker build -t domino14/webolith:$CIRCLE_SHA1 \
                -t domino14/webolith:latest .

            docker login --username domino14 --password $DOCKER_PASSWORD
            docker push domino14/webolith-nginx:$CIRCLE_SHA1
            docker push domino14/webolith-nginx:latest
            docker push domino14/webolith:$CIRCLE_SHA1
            docker push domino14/webolith:latest

  deploy:
    docker:
      - image: domino14/aerolith-deployer
    steps:
      - add_ssh_keys:
          fingerprints:
            # This is the k8s-deploy-key fingerprint
            - "84:74:a3:ce:d0:4e:9d:f5:ab:74:ed:10:15:9a:81:2b"
      - run: if [ ! -n "$(grep "^github.com " ~/.ssh/known_hosts)" ]; then ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null; fi
      - run: git clone git@github.com:domino14/aerolith-k8s
      - run: doctl kubernetes cluster kubeconfig save k8s-1-24-4-do-0-nyc1-1666148172372
      - run: cd aerolith-k8s && inv deploy-webolith

workflows:
  version: 2
  build_app:
    jobs:
      - build_python
      - build_js
      - build_docker:
          requires:
            - build_python
            - build_js
          filters:
            branches:
              only:
                - master
                - staging
      - deploy:
          requires:
            - build_docker
          filters:
            branches:
              only: master
